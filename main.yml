student_t newuser = {
    .id = 1,
    .age = 25,
    .fname = malloc(sizeof(char) * 6),
    .lname = malloc(sizeof(char) * 12),
    .faculty = malloc(sizeof(char) * 14),
};

strcpy(newuser.fname, "Davit");
strcpy(newuser.lname, "Martirosyan");
strcpy(newuser.faculty, "Civil Defense");

Create(&table, &newuser);

char *rd = readline("$: ");

free(newuser.fname);
free(newuser.lname);
free(newuser.faculty);




if (query[i] && ft_isalpha(query[i]) && (int)ft_strlen(query) > i)
{
    // printf("word: |%s|\n", query + i);
    i += addword(&tok, &i, query);
}
if (query[i] && ft_isspace(query[i]))
{
    // printf("sp: |%s|\n", query + i);
    i++;
    continue;
}
if (query[i] && query[i] == '{')
{
    // printf("exp: |%s|\n", query + i);
    i += addexpansion(&tok, &i, query);
}
// i++;



void	addexpansion(query_t **tokens, int *i, char *query)
{
    int s = *i;
    int e = 0;
    bool oppened = true;
    while (oppened)
    {
        if (query[s] == '}')
            oppened = false;
        s++;
        e++;
    }
    char *keys = ft_substr(query, *i, e);
    *i += e;
    printf("keys|values -> %s\n", keys);
    free(keys);
}

void	space(query_t **tokens, int *i, char *query)
{
	int		s;
	int		len;
	char	*separator;

	s = *i;
	len = 0;
	separator = NULL;
	while (query[++s])
	{
		if (!ft_isspace(query[s]))
			break ;
		++len;
	}
	separator = word(query, len, *i);
	free(separator);
	*i += len;
}

char	*word(char *query, int len, int s_pos)
{
	char	*word;
	int		i;

	i = 0;
	word = NULL;
	word = malloc(sizeof(char) * (len + 1));
	while (i < len)
	{
		word[i] = query[s_pos];
		s_pos++;
		i++;
	}
	word[i] = '\0';
	return (word);
}

int	wordlen(char *wordstart, int s_pos)
{
	int	i;

	i = 0;
	while (wordstart[s_pos] && ft_iswordpart(wordstart[s_pos]))
	{
		s_pos++;
		i++;
	}
	return (i);
}




Orion *add    = dc_query(table, "                        ADD                             TO                                     users                              {fname, age, lname}                                   {             Davit,                        25,               Martirosyan                }                              ");




		// Orion *create = dc_query(table, "CREATE users    {                 char fname    , char lname           , int         :      age              } id:1");
		// Orion *add    = dc_query(table, "ADD TO users{    fname, age, lname    }    {   Davit, 25, Martirosyan            }    ");
		// Orion *ret    = dc_query(table, "RETREIVE FROM users {fname, lname} OF id:1");
		Orion *upd    = dc_query(table, orion);
		// "UPDATE IN users {fname}  {Davo} OF id:1";
		// Orion *del    = dc_query(table, "DELETE FROM users id:1");
		// Orion *lst    = dc_query(table, "LIST users");
		// Orion *srt    = dc_query(table, "SORT users BY fname"); /// ??????????????????????



void	expansionopen(query_t *tok, char *query, int *i)
{
	char *expopen = ft_substr(query, *i, 1);
	tok->is_inside = true;
	// printf("Op: |%s|\n", expopen);
	append_node(&tok->tokens, expopen, EXPANSION_OPEN);
	free(expopen);
}

void	expansionclose(query_t *tok, char *query, int *i)
{
	char *expclose = ft_substr(query, *i, 1);
	tok->is_inside = false;
	// printf("Cl: |%s|\n", expclose);
	append_node(&tok->tokens, expclose, EXPANSION_CLOSE);
	free(expclose);
}

void	addexpfield(query_t *tok, char *query, int *i)
{
	int expansion_len = 0;
	int j = *i;

	while (query[j] && query[j] != ',' && query[j] != '}')
	{
		j++;
		expansion_len++;
	}
	char *expansion_field = ft_substr(query, *i, expansion_len);
	// printf("Field: |%s|\n", expansion_field);
	append_node(&tok->tokens, expansion_field, EXPANSION_FIELD);
	free(expansion_field);
	*i += expansion_len;
}



		for(int c = 0; c < size; c++)
		{
			char *tmp = ft_strtrim(fields[c], " \t\b\n\r\a");
			append_node(&tok->tokens, tmp, EXPANSION_FIELD);
			free(tmp);
		}
		for(int c = 0; c < size; c++)
			free(fields[c]);
		free(fields);


int expansion(query_t *tok, char *query, int*i)
{
	int j;
	int find;
	char *exp;
	char *tmp;
	char **fields;
	int size;

	j = *i + 1;
	find = ft_find_first_of("}", query+j);
	if (find != STRINGNPOS)
	{
		exp = ft_substr(query, j, find);
		tmp = ft_strtrim(exp, " \t\b\a\r\n");
		printf("expansion: [%s]\n", tmp);
		append_node(&tok->tokens, tmp, EXPANSION_FIELD);
		free(exp);
		free(tmp);
		tmp = NULL;
		exp = NULL;
		tok->expression_count++;
		tok->expansion_count++;
		tok->size++;
		*i += find + 2;
		return (0);
	}
	return (STRINGNPOS);
}

int identify(query_t *tok, char *query, int *i)
{
	int j;
	int find;
	char *ident;
	char *tmp;

	j = *i + 1;
	find = ft_find_first_of(">", query+j);
	if (find != STRINGNPOS)
	{
		ident = ft_substr(query, j, find);
		tmp = ft_strtrim(ident, " \t\r\b\a\n");
		printf("Identify: [%s]\n", tmp);
		append_node(&tok->tokens, tmp, IDENTIFIER);
		free(ident);
		free(tmp);
		ident = NULL;
		tmp = NULL;
		tok->expression_count++;
		tok->ident_count++;
		tok->size++;
		*i += find + 2;
		return (0);
	}
	return (STRINGNPOS);
}